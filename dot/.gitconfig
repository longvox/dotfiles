# gitconfig
[core]
    excludesfile = ~/.gitignore_global
    pager = less -FXRS -x2
    editor = vim
    whitespace = cr-at-eol
    ignorehook = false
	fileMode = false

[user]
	name = Long Vo
	email = longvox98@gmail.com
    signingkey = 49CB9C43C9BA247A

[github]
	user = longvox

[init]
    templatedir = ~/.config//git/templates

[include]
    path = ~/.gitconfig-local

[status]
	showStash = true
	submoduleSummary = true

[submodule]
	fetchJobs = 4


[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto

[color "branch"]
    current = green bold
    local = green
    remote = red bold

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red

[color "sh"]
    branch = yellow

[push]
    # push will only do the current branch, not all branches
    default = current

[branch]
    # set up 'git pull' to rebase instead of merge
    autosetuprebase = always
    autoSetupMerge = always

[pull]
    rebase = true

[diff]
    algorithm = histogram
    renames = copies
    mnemonicprefix = true
    compactionHeuristic = true
	indentHeuristic = true

[diff "utf-16"]
	textconv = "iconv -f utf-16 -t utf-8"

[difftool]
    prompt = false

[filter "file-encoding"]
	clean = "GIT_TMP=$(mktemp); GIT_FILE_TYPE=$(tee $GIT_TMP | file --brief --mime-encoding -); cat $GIT_TMP | iconv -sc -f $GIT_FILE_TYPE -t utf-8; rm -f $GIT_TMP"
	smudge = "GIT_TMP=$(mktemp); GIT_FILE_TYPE=$(tee $GIT_TMP | file --brief --mime-encoding -); cat $GIT_TMP | iconv -sc -f utf-8 -t $GIT_FILE_TYPE; rm -f $GIT_TMP"
	required = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[apply]
    # do not warn about missing whitespace at EOF
    whitespace = nowarn

[rerere]
	enabled = true
    autoUpdate = true

[grep]
    extendRegexp = true
    lineNumber = true

[credential]
	helper = store

[rebase]
    instructionFormat = "[%an - %ar] %s"
    autoStash = true

[pager]
    diff = "diff-so-fancy | less --tabs=4 -RFX"
    show = "diff-so-fancy | less --tabs=4 -RFX"

[cola]
    spellcheck = false

[http]
	postBuffer = 157286400


[url "git@bitbucket.org:"]
	insteadof = bb:

[url "git@github.com:"]
	insteadof = gh:

[url "git@gitlab.com:"]
	insteadof = gl:

[alias]
    # General helpers
    la = "!git config -l | grep alias | cut -c 7-" # List all aliases
    current-branch = rev-parse --abbrev-ref HEAD # Current branch name
    default-branch = ! git rev-parse --abbrev-ref origin/HEAD | sed 's|^origin/||' # Default branch name
    set-head = remote set-head origin -a # Set HEAD for the origin remote
    assume = update-index --assume-unchanged # Mark file as unchanged
    unassume = update-index --no-assume-unchanged # Unmark file as unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-" # List assumed-unchanged files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged" # Reset all assumed files

    # Status and inspection
    s = status --short --branch # Compact status with branch info
    ss = status # Full status
    br = branch -v # Branch with verbose info
    remotes = remote -v # List remotes
    cbr = rev-parse --abbrev-ref HEAD # Current branch

    # Commit shortcuts
    cnv = commit --no-verify # Commit without hooks
    cane = commit --amend --no-edit # Amend last commit without changing message
    amend = commit -a --amend # Amend with staged changes
    empty = commit --allow-empty # Create an empty commit

    # Push and pull
    poh = push -u origin head # Push HEAD and set upstream
    pnv = push --no-verify # Push without hooks
    pushf = push --force-with-lease # Force push with lease
    pp = "! git pull && git push" # Pull and push
    pur = "! git push && git pr" # Push and open PR
    up = "!f() { git pull --rebase origin \"${1:-$(git default-branch)}\"; }; f" # Pull and rebase

    # Diff and changes
    d = "!git diff --ignore-space-at-eol -b -w --ignore-blank-lines -- ':!**/package-lock.json' ':!**/yarn.lock'" # Custom diff
    diff = diff --ignore-all-space # Ignore all whitespace in diff
    adiws = ! git diff --no-color --ignore-all-space | git apply --cached # Apply diff ignoring all whitespace
    adibl = ! git diff --no-color --ignore-blank-lines | git apply --cached # Apply diff ignoring blank lines

    # Rebase shortcuts
    cont = rebase --continue # Continue rebase
    tidy = "!f() { git rebase --signoff --interactive \"origin/${1:-$(git default-branch)}\"; }; f" # Rebase with signoff

    # Logs and history
    l = log --graph --pretty=format:'%Cred%h%Creset %C(bold blue)%an%C(reset) - %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative # Pretty graph log
    log-pretty = log --color --date=local --pretty=format:'%C(red)%h%C(reset)%C(yellow)%d%C(reset) %s %C(green)(%cr) %C(magenta)(%cd) %C(bold blue)<%an>%C(reset)' # Prettified log
    lg = log-pretty --graph # Prettified graph log
    day = "!sh -c 'git log --reverse --no-merges --branches=* --date=local --after=\"yesterday 11:59PM\" --author=\"`git config --get user.name`\"'" # Logs for the past day
    filehistory = log-pretty -- # File history
    linehistory = log-pretty -L # Line history

    # Branch management
    cob = checkout -b # Create and switch to a new branch
    delete-merged-branches = "!f() { git checkout --quiet master && git branch --merged | grep --invert-match '\\*' | xargs -n 1 git branch --delete; git checkout --quiet @{-1}; }; f" # Delete merged branches
    forget = "!git fetch -p origin && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D" # Delete local branches tracking deleted remotes

    # Submodule management
    si = submodule init # Initialize submodules
    su = submodule update # Update submodules
    sub = "!git submodule sync && git submodule update" # Sync and update submodules

    # Cleanup and maintenance
    cleanup = "!git remote prune origin && git gc && git clean -df && git stash clear" # Cleanup repo
    fresh-clean = ! git reset HEAD -- . && git checkout -- . && git clean -ffxd # Fully clean workspace
    sweep = "! git prune && git remote prune origin && git branch --list --format '%(if:equals=[gone])%(upstream:track)%(then)%(refname:short)%(end)' | grep --extended-regexp --invert-match '^$' | xargs git branch --delete --force && git gc" # Sweep and clean

    # Miscellaneous
    web-url = "! [[ \"$(git remote get-url --push $(git remote show | head -1))\" =~ ^.*@(.*)[:/](.*)/(.*)$ ]] && printf -- 'https://%s/%s/%s' \"${BASH_REMATCH[1]}\" \"${BASH_REMATCH[2]}\" \"${BASH_REMATCH[3]%.git}\"" # Generate web URL for repo
    web = "! open \"$(git web-url)\"" # Open repo in browser
    pr = "! open \"$(git web-url)/compare/$(git default-branch)...$(git current-branch)?expand=1\"" # Open PR for current branch

[safe]
	directory = /opt/flutter
